`timescale 1ns / 1ps
module led_test (
sys_clk_p, // 开发板上差分输入时钟 200Mhz， 正极
sys_clk_n, // 开发板上差分输入时钟 200Mhz， 负极
rst_n, // 核心板上输入复位按键
led // 输出 LED 灯,用于控制开发板上四个 LED(LED1~LED4)
);
//================================================================
// PORT declarations
//================================================================
input sys_clk_p;
input sys_clk_n;
input rst_n;
output [3:0] led;
//寄存器定义
reg [31:0] timer;
reg [3:0] led;
//=================================================================
// 差分时钟转换成单端时钟
//=================================================================
wire sys_clk_ibufg;
IBUFGDS #
(
.DIFF_TERM ("FALSE"),
.IBUF_LOW_PWR ("FALSE")
)
u_ibufg_sys_clk
(
.I (sys_clk_p), //差分时钟的正端输入，需要和顶层模块的端口直接连接
.IB (sys_clk_n), // 差分时钟的负端输入，需要和顶层模块的端口直接连接
.O (sys_clk_ibufg) //时钟缓冲输出
);
//====================================================================
// 计数器计数:循环计数 0~1 秒
//====================================================================
always @(posedge sys_clk_ibufg or negedge rst_n) //检测时钟的上升沿和复位的下降沿
begin
if (~rst_n) //复位信号低有效
timer <= 0; //计数器清零
else if (timer == 32'd199_999_999) //开发板使用的晶振为 200MHz，1 秒计数(200M*1-1=199_999_999)
timer <= 0; //计数器计到 4 秒，计数器清零
else
timer <= timer + 1'b1; //计数器加 1
end
//==================================================================
// LED 灯控制
//==================================================================
always @(posedge sys_clk_ibufg or negedge rst_n) //检测时钟的上升沿和复位的下降沿
begin
if (~rst_n) //复位信号低有效
led <= 4'b0000; //LED 灯输出全为低，四个 LED 灯亮
else if (timer == 32'd49_999_999) //计数器计到 0.25 秒，
led <= 4'b0001; //LED1 熄灭
else if (timer == 32'd99_999_999) //计数器计到 0.5 秒，
led <= 4'b0010; //LED2 熄灭
else if (timer == 32'd149_999_999) //计数器计到 0.75 秒，
led <= 4'b0100; //LED3 熄灭
else if (timer == 32'd199_999_999) //计数器计到 1 秒，
led <= 4'b1000; //LED4 熄灭
end
endmodule